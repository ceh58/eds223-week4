---
title: "Week 4"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
install.packages("geodata")
install.packages('spDataLarge')
library(terra) # for rasters
library(tidyverse)
library(tmap)
library(kableExtra)
library(spData)
library(spDataLarge)
library(geodata)
```

# Create raster objects
```{r}
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))
```

## View on map
```{r}
tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)")

tm_shape(zion_land) +
  tm_raster(title = "Land Cover")

#summary(zion_elevation)
#summary(zion_land)
```

## Multilayer raster
```{r}
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
#landsat shows 4 nlyr = 4 layers
```

## Map multilayer raster
```{r}
# Maps each of the 4 layers
tm_shape(landsat) +
  tm_raster()
```

## Subsetting
```{r}
landsat3 <- subset(landsat, 3) # or can call "landsat_3"

tm_shape(landsat3) +
  tm_raster()
```

## Inspect key elements of a raster layer
```{r}
# Find mean of whole matrix
global(zion_elevation, mean) 

# How often land cover type occurs
freq(zion_land)
```

# Indexing raster data
```{r}
# First row, first column <- update value
zion_elevation[1,1] <- 0

# Cell number
zion_elevation[1]

# First cell for each layer
landsat[1] <- 0 

# Practice on test raster
test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA
```

## Spatial subsetting
```{r}
# Define point
point <- matrix(c(-113, 37.5), ncol = 2)

# Extract values at point
terra::extract(zion_elevation, point)

# Multilayer
terra::extract(landsat, point)
```

### Clip raster
```{r}
# Create smaller raster
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
             resolution = 0.3,
             vals = 1)

# Clip
zion_elevation_clip <- zion_elevation[clip, drop = FALSE] # don't drop geometries (default)

# Make a map to confirm
tm_shape(zion_elevation_clip) +
  tm_raster(title = "Elevation (m)")
```

### Mask raster
```{r}
# Copy elevation raster
rmask <- zion_elevation

# Boolean operators to create mask
rmask[rmask < 2000] <- NA

# Bracket subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]

masked2 <- terra::mask(zion_elevation, rmask)
```

```{r}
# Original data
tm_shape(zion_elevation) +
  tm_raster()

# Map the masked data
tm_shape(masked1) +
  tm_raster()

# Same as
tm_shape(masked2) +
  tm_raster()
```

```{r}
rcl<- matrix(c(1000, 1500, 1, # min, max, group
               1500, 2000, 2, 
               2000, 2500, 3,
               2500, 3000, 4),
             ncol = 3, byrow = TRUE)

reclassified <- terra::classify(zion_elevation, rcl = rcl)
values(reclassified) <- as.factor(values(reclassified))

tm_shape(reclassified) +
  tm_raster()
```

```{r}
# Create a function for ndvi
ndvi_fun <- function(nir, red){
  (nir-red)/(nir+red)
}

ndvi_rast <- lapp(landsat[[c(4,3)]], fun = ndvi_fun)

tm_shape(ndvi_rast) +
  tm_raster()
```

### Focal:
```{r}
elevation_focal <- focal(zion_elevation,
      w = matrix(1, nrow = 9, ncol = 9),
      fun = min)
```

```{r}
tm_shape(elevation_focal) +
  tm_raster()
```

### Zonal:
```{r}
terra::zonal(zion_elevation, reclassified, fun = mean)
```

### Global:
```{r}
terra::global(zion_elevation, mean)
```

# Chaning geometries:
## Changing the extent:
```{r}
# Create new raster with larger extent
extend <- terra::extend(zion_elevation, c(1, 200))

# Extend original raster to bigger raster
extend2 <- terra::extend(zion_elevation, extend)

# Add rasters
extend + extend2
```

## Origin:
```{r}
# Can reassign, but shouldn't
origin(zion_elevation)
```

## Changing resolution:
```{r}
# Aggregate
zion_elevation_coarse <- terra::aggregate(zion_elevation,
                                          fact = 5,
                                          fun = mean)
# Map aggregation
tm_shape(zion_elevation_coarse) +
  tm_raster()

# Disaggregate
zion_elevation_disagg <- terra::disagg(zion_elevation_coarse, 
                                       fact = 5,
                                       method = "bilinear")
# Check against original
if(identical(zion_elevation, zion_elevation_disagg)) {
  print("Match!")
} else {
  warning("Don't match.")
}

tm_shape(zion_elevation_disagg) +
  tm_raster()
```

## Resampling:
```{r}
# Raster we want to resample into
target_rast <- rast(xmin = -113.2, xmax = -112.9, 
                    ymin = 37.4, ymax = 37.5,
                    nrow = 450, ncol = 460,
                    crs = crs(zion_elevation))

elevation_resample <- terra::resample(zion_elevation, y = target_rast, method = "bilinear")

tm_shape(elevation_resample) +
  tm_raster()
```

